Intro
- x86 centric, Haswell/Ivy
- there will be assembly!
Guesses where your data is
- Caches so much faster than RAM
- But first miss expensive
- Often code has predictable memory access pattern
- Cache "learns" these and tries to run ahead
- Great when right, extra stress when wrong
CISC -> RISC
- Intel hates their complex ISA as much as we do
- So they don't ues it
- Decode circuitry turns x86 code into internal µops
- Sorta code compression
- "compare" / "branch" -> one µop
Turns code into SSA
- Inter-instruction dependency DAG
- Many more registers than the ISA exposes
- Internal "SSA" form is then further optimized
  - mov eax, edx -> goes away
Reschedules instructions
- completely reordered based on DAG
- multiple "execution ports" let instructions run in parallel
- independent slow instructions don't affect other
- 100+ instructions can be in flight
Predicts the future
- Only way to fill the 100+ pipe is to predict branches
- "Learns" patterns of branches
- Also used for polymorphic dispatch
- Can even be seen from Python
  - example

dropped:
* Python demo 
* cpu is a network
* http://goo.gl/uLbQzY
